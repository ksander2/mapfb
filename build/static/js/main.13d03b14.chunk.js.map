{"version":3,"sources":["reducers/index.js","actions/constants.js","components/InputPointField.js","containers/InputPointField.js","actions/index.js","components/ListPoint.js","containers/ListPoint.js","components/Loader.js","components/MapBasic.js","containers/MapBasic.js","components/App.js","index.js"],"names":["rootReducer","combineReducers","points","state","action","type","payload","filter","point","id","pointInfo","newPoints","map","coordinate","centerMap","mapState","isLoaded","InputPointField","props","handleKeyPress","event","key","target","value","addPointAction","name","placeholder","this","placeholderText","className","onKeyPress","maxLength","React","Component","container","connect","store","dispatch","addPoint","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","ListPoint","handleButtonDeleteClick","e","removePointAction","handleDragEnd","destination","items","source","index","reorderPointsAction","onDragEnd","droppableId","provided","snapshot","droppableProps","ref","innerRef","item","draggableId","toString","draggableProps","dragHandleProps","style","onClick","bind","reorderPoints","pointId","removePoint","Loader","MapBasics","handleBoundChange","element","get","setCenterMapAction","getCenter","handleDragPlacemark","properties","geometry","getCoordinates","dragPointOnMapAction","handleLoad","mapLoadSuccessAction","renderPlaceMarks","options","draggable","balloonContentBody","toFixed","balloonContentHeader","onDrag","renderYmaps","onLoad","modules","onBoundschange","center","zoom","centerCoordinate","updatePoint","App","Fragment","createStore","render","document","getElementById"],"mappings":"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","file":"static/js/main.13d03b14.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\r\nimport * as constants from '../actions/constants';\r\n\r\nconst points = (state = [], action) => {\r\n  switch (action.type) {\r\n    case constants.ADD_POINT:\r\n      return [...state, action.payload];\r\n    case constants.REMOVE_POINT:\r\n      return state.filter(point => point.id !== action.payload);\r\n    case constants.UPDATE_POINT: {\r\n      const pointInfo = action.payload;\r\n      const newPoints = state.map(point => {\r\n        if (point.id === pointInfo.id) {\r\n          point.coordinate = pointInfo.coordinate;\r\n        }\r\n        return point;\r\n      });\r\n      return newPoints;\r\n    }\r\n    case constants.REORDER_POINTS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst centerMap = (state = [55.751574, 37.573856], action) => {\r\n  switch (action.type) {\r\n    case constants.SET_CENTER_MAP:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst mapState = (state = { isLoaded: false }, action) => {\r\n  switch (action.type) {\r\n    case constants.MAP_LOAD_SUCCESS:\r\n      return { isLoaded: true };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const rootReducer = combineReducers({\r\n  points,\r\n  centerMap,\r\n  mapState,\r\n});\r\n","export const ADD_POINT = 'ADD_POINT';\r\nexport const REORDER_POINTS = 'REORDER_POINTS';\r\nexport const REMOVE_POINT = 'REMOVE_POINT';\r\nexport const UPDATE_POINT = 'UPDATE_POINT';\r\nexport const SET_CENTER_MAP = 'SET_CENTER_MAP';\r\nexport const MAP_LOAD_SUCCESS = 'MAP_LOAD_SUCCESS';\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./InputPointField.css\";\r\n\r\nclass InputPointField extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.id = 0;\r\n  }\r\n\r\n  handleKeyPress = event => {\r\n    if (event.key === \"Enter\") {\r\n      if (event.target.value !== \"\") {\r\n        this.props.addPointAction({\r\n          name: event.target.value,\r\n          id: this.id++,\r\n          coordinate: this.props.centerMap\r\n        });\r\n        event.target.value = \"\";\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        id={\"input-point\"}\r\n        placeholder={this.placeholderText}\r\n        className={\"input-point-name\"}\r\n        placeholderText=\"Введите название точки\"\r\n        onKeyPress={this.handleKeyPress}\r\n        maxLength=\"30\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nInputPointField.propTypes = {\r\n  text: PropTypes.string,\r\n  centerMap: PropTypes.array.isRequired\r\n};\r\n\r\nexport default InputPointField;\r\n","import { connect } from 'react-redux';\r\nimport InputPointField from '../components/InputPointField';\r\nimport { addPoint } from '../actions/index';\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addPointAction: point => dispatch(addPoint(point)),\r\n});\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    points: store.points,\r\n    centerMap: store.centerMap,\r\n  };\r\n};\r\n\r\nconst container = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(InputPointField);\r\n\r\nexport default container;\r\n","import * as constants from './constants';\r\n\r\nexport const addPoint = point => ({\r\n  type: constants.ADD_POINT,\r\n  payload: point,\r\n});\r\n\r\nexport const reorderPoints = points => ({\r\n  type: constants.REORDER_POINTS,\r\n  payload: points,\r\n});\r\n\r\nexport const removePoint = pointId => ({\r\n  type: constants.REMOVE_POINT,\r\n  payload: pointId,\r\n});\r\n\r\nexport const updatePoint = pointInfo => ({\r\n  type: constants.UPDATE_POINT,\r\n  payload: pointInfo,\r\n});\r\n\r\nexport const setCenterMap = center => ({\r\n  type: constants.SET_CENTER_MAP,\r\n  payload: center,\r\n});\r\n\r\nexport const mapLoadSuccess = () => ({\r\n  type: constants.MAP_LOAD_SUCCESS,\r\n});\r\n","import React, { Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport './ListPoint.css';\r\n\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nclass ListPoint extends Component {\r\n  handleButtonDeleteClick = e => {\r\n    this.props.removePointAction(e);\r\n  };\r\n\r\n  handleDragEnd = result => {\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const items = reorder(\r\n      this.props.points,\r\n      result.source.index,\r\n      result.destination.index\r\n    );\r\n\r\n    this.props.reorderPointsAction(items);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <DragDropContext onDragEnd={this.handleDragEnd}>\r\n        <Droppable droppableId=\"droppable\">\r\n          {(provided, snapshot) => (\r\n            <ul\r\n              className={'list-points'}\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n            >\r\n              {this.props.points.map((item, index) => (\r\n                <Draggable\r\n                  key={`key-${item.id}`}\r\n                  draggableId={item.id.toString(10)}\r\n                  index={index}\r\n                >\r\n                  {(provided, snapshot) => (\r\n                    <li\r\n                      className={'list-points-item'}\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                      style={provided.draggableProps.style}\r\n                    >\r\n                      {item.name}\r\n                      <span\r\n                        className={'delete-button'}\r\n                        onClick={this.handleButtonDeleteClick.bind(\r\n                          this,\r\n                          item.id\r\n                        )}\r\n                      >\r\n                        X\r\n                      </span>\r\n                    </li>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n              {provided.placeholder}\r\n            </ul>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListPoint;\r\n","import { connect } from 'react-redux';\r\nimport ListPoint from '../components/ListPoint';\r\nimport { removePoint, reorderPoints } from '../actions/index';\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  reorderPointsAction: points => dispatch(reorderPoints(points)),\r\n  removePointAction: pointId => dispatch(removePoint(pointId)),\r\n});\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    points: store.points,\r\n  };\r\n};\r\n\r\nconst container = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ListPoint);\r\n\r\nexport default container;\r\n","import React from \"react\";\r\nimport \"./Loader.css\";\r\n\r\nfunction Loader() {\r\n  return <div className={\"loader-spinner\"} />;\r\n}\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { YMaps, Map, Polyline, Placemark } from \"react-yandex-maps\";\r\nimport Loader from \"./Loader\";\r\nimport \"./MapBasic.css\";\r\n\r\nclass MapBasics extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.mapState = {\r\n      center: props.centerMap,\r\n      zoom: 10\r\n    };\r\n  }\r\n\r\n  handleBoundChange = item => {\r\n    const element = item.get(\"target\");\r\n    this.props.setCenterMapAction(element.getCenter());\r\n  };\r\n\r\n  handleDragPlacemark = item => {\r\n    const element = item.get(\"target\");\r\n    const id = element.properties.get(\"id\");\r\n    const coordinate = element.geometry.getCoordinates();\r\n    this.props.dragPointOnMapAction({ id, coordinate });\r\n  };\r\n\r\n  handleLoad = () => {\r\n    this.props.mapLoadSuccessAction(true);\r\n  };\r\n\r\n  renderPlaceMarks = points => {\r\n    return points.map(item => (\r\n      <Placemark\r\n        key={`key-${item.id}`}\r\n        options={{ draggable: true }}\r\n        properties={{\r\n          balloonContentBody: item.coordinate.map(item => item.toFixed(6)),\r\n          balloonContentHeader: item.name,\r\n          id: item.id\r\n        }}\r\n        geometry={item.coordinate}\r\n        onDrag={this.handleDragPlacemark}\r\n      />\r\n    ));\r\n  };\r\n\r\n  renderYmaps = points => {\r\n    return (\r\n      <YMaps>\r\n        <Map\r\n          className={\"y-map\"}\r\n          onLoad={this.handleLoad}\r\n          state={this.mapState}\r\n          modules={[\"geoObject.addon.balloon\", \"geoObject.addon.hint\"]}\r\n          onBoundschange={this.handleBoundChange}\r\n        >\r\n          {this.renderPlaceMarks(points)}\r\n          <Polyline geometry={points.map(item => item.coordinate)} />\r\n        </Map>\r\n      </YMaps>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { points } = this.props;\r\n    const { isLoaded } = this.props;\r\n    return (\r\n      <div>\r\n        {this.renderYmaps(points)}\r\n        {isLoaded ? null : <Loader />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapBasics;\r\n","import { connect } from 'react-redux';\r\nimport MapBasics from '../components/MapBasic';\r\nimport { setCenterMap, mapLoadSuccess, updatePoint } from '../actions/index';\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setCenterMapAction: centerCoordinate =>\r\n    dispatch(setCenterMap(centerCoordinate)),\r\n  mapLoadSuccessAction: isLoaded => dispatch(mapLoadSuccess(isLoaded)),\r\n  dragPointOnMapAction: pointInfo => dispatch(updatePoint(pointInfo)),\r\n});\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    points: store.points,\r\n    centerMap: store.centerMap,\r\n    isLoaded: store.mapState.isLoaded,\r\n  };\r\n};\r\n\r\nconst container = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MapBasics);\r\n\r\nexport default container;\r\n","import React from \"react\";\r\nimport InputPointField from \"../containers/InputPointField\";\r\nimport ListPoint from \"../containers/ListPoint\";\r\nimport MapBasics from \"../containers/MapBasic\";\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <header>\r\n          <h1>fun-box.ru</h1>\r\n        </header>\r\n        <div className=\"list-container\">\r\n          <InputPointField />\r\n          <ListPoint />\r\n        </div>\r\n        <div className=\"map-container\">\r\n          <MapBasics />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport { rootReducer } from './reducers';\r\nimport App from './components/App.js';\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}