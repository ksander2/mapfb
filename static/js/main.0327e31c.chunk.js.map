{"version":3,"sources":["reducers/index.js","actions/constants.js","components/InputPointField.js","containers/InputPointField.js","actions/index.js","components/ListPoint.js","containers/ListPoint.js","components/MapBasic.js","containers/MapBasic.js","components/App.js","index.js"],"names":["rootReducer","combineReducers","points","state","action","type","payload","filter","point","id","pointInfo","newPoints","map","coordinate","centerMap","mapState","isLoaded","InputPointField","props","handleKeyPress","event","key","text","inputRef","current","value","addPointAction","name","handeIputTextChange","target","React","createRef","maxLengthInput","placeholderText","placeholder","this","className","ref","onChange","onKeyPress","maxLength","Component","container","connect","store","dispatch","addPoint","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","ListPoint","handleButtonDeleteClick","e","removePointAction","handleDragEnd","destination","items","source","index","reorderPointsAction","onDragEnd","droppableId","provided","snapshot","droppableProps","innerRef","item","draggableId","toString","draggableProps","dragHandleProps","style","onClick","bind","reorderPoints","pointId","removePoint","MapBasics","handleBoundChange","element","get","setCenterMapAction","getCenter","handleDragPlacemark","properties","geometry","getCoordinates","dragPointOnMapAction","handleLoad","mapLoadSuccessAction","renderLoader","renderPlaceMarks","options","draggable","balloonContentBody","toFixed","balloonContentHeader","onDrag","renderYmaps","onLoad","modules","onBoundschange","center","zoom","centerCoordinate","updatePoint","App","createStore","render","document","getElementById"],"mappings":"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","file":"static/js/main.0327e31c.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\r\nimport * as constants from '../actions/constants';\r\n\r\nconst points = (state = [], action) => {\r\n  switch (action.type) {\r\n    case constants.ADD_POINT:\r\n      return [...state, action.payload];\r\n    case constants.REMOVE_POINT:\r\n      return state.filter(point => point.id !== action.payload);\r\n    case constants.UPDATE_POINT: {\r\n      const pointInfo = action.payload;\r\n      const newPoints = state.map(point => {\r\n        if (point.id === pointInfo.id) {\r\n          point.coordinate = pointInfo.coordinate;\r\n        }\r\n        return point;\r\n      });\r\n      return newPoints;\r\n    }\r\n    case constants.REORDER_POINTS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst centerMap = (state = [55.751574, 37.573856], action) => {\r\n  switch (action.type) {\r\n    case constants.SET_CENTER_MAP:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst mapState = (state = { isLoaded: false }, action) => {\r\n  switch (action.type) {\r\n    case constants.MAP_LOAD_SUCCESS:\r\n      return { isLoaded: true };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const rootReducer = combineReducers({\r\n  points,\r\n  centerMap,\r\n  mapState,\r\n});\r\n","export const ADD_POINT = 'ADD_POINT';\r\nexport const REORDER_POINTS = 'REORDER_POINTS';\r\nexport const REMOVE_POINT = 'REMOVE_POINT';\r\nexport const UPDATE_POINT = 'UPDATE_POINT';\r\nexport const SET_CENTER_MAP = 'SET_CENTER_MAP';\r\nexport const MAP_LOAD_SUCCESS = 'MAP_LOAD_SUCCESS';\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./InputPointField.css\";\r\n\r\nclass InputPointField extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.inputRef = React.createRef();\r\n    this.maxLengthInput = 25;\r\n    this.placeholderText = \"Введите название точки\";\r\n    this.id = 0;\r\n    this.text = \"\";\r\n  }\r\n\r\n  handleKeyPress = event => {\r\n    if (event.key === \"Enter\") {\r\n      if (this.text !== \"\") {\r\n        this.inputRef.current.value = \"\";\r\n        this.props.addPointAction({\r\n          name: this.text,\r\n          id: this.id++,\r\n          coordinate: this.props.centerMap\r\n        });\r\n        this.text = \"\";\r\n      }\r\n    }\r\n  };\r\n\r\n  handeIputTextChange = event => {\r\n    this.text = event.target.value;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        id={\"input-point\"}\r\n        placeholder={this.placeholderText}\r\n        className={\"input-point-name\"}\r\n        ref={this.inputRef}\r\n        onChange={this.handeIputTextChange}\r\n        onKeyPress={this.handleKeyPress}\r\n        maxLength={this.maxLengthInput}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nInputPointField.propTypes = {\r\n  text: PropTypes.string,\r\n  centerMap: PropTypes.array.isRequired\r\n};\r\n\r\nexport default InputPointField;\r\n","import { connect } from 'react-redux';\r\nimport InputPointField from '../components/InputPointField';\r\nimport { addPoint } from '../actions/index';\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addPointAction: point => dispatch(addPoint(point)),\r\n});\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    points: store.points,\r\n    centerMap: store.centerMap,\r\n  };\r\n};\r\n\r\nconst container = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(InputPointField);\r\n\r\nexport default container;\r\n","import * as constants from './constants';\r\n\r\nexport const addPoint = point => ({\r\n  type: constants.ADD_POINT,\r\n  payload: point,\r\n});\r\n\r\nexport const reorderPoints = points => ({\r\n  type: constants.REORDER_POINTS,\r\n  payload: points,\r\n});\r\n\r\nexport const removePoint = pointId => ({\r\n  type: constants.REMOVE_POINT,\r\n  payload: pointId,\r\n});\r\n\r\nexport const updatePoint = pointInfo => ({\r\n  type: constants.UPDATE_POINT,\r\n  payload: pointInfo,\r\n});\r\n\r\nexport const setCenterMap = center => ({\r\n  type: constants.SET_CENTER_MAP,\r\n  payload: center,\r\n});\r\n\r\nexport const mapLoadSuccess = () => ({\r\n  type: constants.MAP_LOAD_SUCCESS,\r\n});\r\n","import React, { Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport './ListPoint.css';\r\n\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nclass ListPoint extends Component {\r\n  handleButtonDeleteClick = e => {\r\n    this.props.removePointAction(e);\r\n  };\r\n\r\n  handleDragEnd = result => {\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const items = reorder(\r\n      this.props.points,\r\n      result.source.index,\r\n      result.destination.index\r\n    );\r\n\r\n    this.props.reorderPointsAction(items);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <DragDropContext onDragEnd={this.handleDragEnd}>\r\n        <Droppable droppableId=\"droppable\">\r\n          {(provided, snapshot) => (\r\n            <ul\r\n              className={'list-points'}\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n            >\r\n              {this.props.points.map((item, index) => (\r\n                <Draggable\r\n                  key={`key-${item.id}`}\r\n                  draggableId={item.id.toString(10)}\r\n                  index={index}\r\n                >\r\n                  {(provided, snapshot) => (\r\n                    <li\r\n                      className={'list-points-item'}\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                      style={provided.draggableProps.style}\r\n                    >\r\n                      {item.name}\r\n                      <span\r\n                        className={'delete-button'}\r\n                        onClick={this.handleButtonDeleteClick.bind(\r\n                          this,\r\n                          item.id\r\n                        )}\r\n                      >\r\n                        X\r\n                      </span>\r\n                    </li>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n              {provided.placeholder}\r\n            </ul>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListPoint;\r\n","import { connect } from 'react-redux';\r\nimport ListPoint from '../components/ListPoint';\r\nimport { removePoint, reorderPoints } from '../actions/index';\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  reorderPointsAction: points => dispatch(reorderPoints(points)),\r\n  removePointAction: pointId => dispatch(removePoint(pointId)),\r\n});\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    points: store.points,\r\n  };\r\n};\r\n\r\nconst container = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ListPoint);\r\n\r\nexport default container;\r\n","import React from 'react';\r\nimport { YMaps, Map, Polyline, Placemark } from 'react-yandex-maps';\r\n\r\nimport './MapBasic.css';\r\n\r\nclass MapBasics extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.mapState = {\r\n      center: props.centerMap,\r\n      zoom: 10,\r\n    };\r\n  }\r\n\r\n  handleBoundChange = item => {\r\n    const element = item.get('target');\r\n    this.props.setCenterMapAction(element.getCenter());\r\n  };\r\n\r\n  handleDragPlacemark = item => {\r\n    const element = item.get('target');\r\n    const id = element.properties.get('id');\r\n    const coordinate = element.geometry.getCoordinates();\r\n    this.props.dragPointOnMapAction({ id, coordinate });\r\n  };\r\n\r\n  handleLoad = () => {\r\n    this.props.mapLoadSuccessAction(true);\r\n  };\r\n\r\n  renderLoader = () => {\r\n    return <div className={'loader-spinner'} />;\r\n  };\r\n\r\n  renderPlaceMarks = points => {\r\n    return points.map(item => (\r\n      <Placemark\r\n        key={`key-${item.id}`}\r\n        options={{ draggable: true }}\r\n        properties={{\r\n          balloonContentBody: item.coordinate.map(item => item.toFixed(6)),\r\n          balloonContentHeader: item.name,\r\n          id: item.id,\r\n        }}\r\n        geometry={item.coordinate}\r\n        onDrag={this.handleDragPlacemark}\r\n      />\r\n    ));\r\n  };\r\n\r\n  renderYmaps = points => {\r\n    return (\r\n      <YMaps>\r\n        <Map\r\n          className={'y-map'}\r\n          onLoad={this.handleLoad}\r\n          state={this.mapState}\r\n          modules={['geoObject.addon.balloon', 'geoObject.addon.hint']}\r\n          onBoundschange={this.handleBoundChange}\r\n        >\r\n          {this.renderPlaceMarks(points)}\r\n          <Polyline geometry={points.map(item => item.coordinate)} />\r\n        </Map>\r\n      </YMaps>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { points } = this.props;\r\n    const { isLoaded } = this.props;\r\n    return (\r\n      <div>\r\n        {this.renderYmaps(points)}\r\n        {isLoaded ? null : this.renderLoader()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapBasics;\r\n","import { connect } from 'react-redux';\r\nimport MapBasics from '../components/MapBasic';\r\nimport { setCenterMap, mapLoadSuccess, updatePoint } from '../actions/index';\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setCenterMapAction: centerCoordinate =>\r\n    dispatch(setCenterMap(centerCoordinate)),\r\n  mapLoadSuccessAction: isLoaded => dispatch(mapLoadSuccess(isLoaded)),\r\n  dragPointOnMapAction: pointInfo => dispatch(updatePoint(pointInfo)),\r\n});\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    points: store.points,\r\n    centerMap: store.centerMap,\r\n    isLoaded: store.mapState.isLoaded,\r\n  };\r\n};\r\n\r\nconst container = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MapBasics);\r\n\r\nexport default container;\r\n","import React from \"react\";\r\nimport InputPointField from \"../containers/InputPointField\";\r\nimport ListPoint from \"../containers/ListPoint\";\r\nimport MapBasics from \"../containers/MapBasic\";\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>fun-box.ru2</h1>\r\n        <div className=\"list-container\">\r\n          <InputPointField />\r\n          <ListPoint />\r\n        </div>\r\n        <div className=\"map-container\">\r\n          <MapBasics />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport { rootReducer } from './reducers';\r\nimport App from './components/App.js';\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}